package at.kingcraft.OnevsOne_arena.Listener;


import java.util.ArrayList;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;

import at.kingcraft.OnevsOne_arena.MainClass;
import at.kingcraft.OnevsOne_arena.Messenger;
import at.kingcraft.OnevsOne_arena.Challenges.ChallangeManager;
import at.kingcraft.OnevsOne_arena.Challenges.Challenge;
import at.kingcraft.OnevsOne_arena.Commands.EndmatchCommand;
import at.kingcraft.OnevsOne_arena.Duels.Duel;
import at.kingcraft.OnevsOne_arena.Duels.DuelManager;
import at.kingcraft.OnevsOne_setup.Map;
import at.kingcraft.OnevsOne_setup.MapManager;
import net.md_5.bungee.api.ChatColor;

public class DuelListener implements Listener {
	
	private MainClass plugin;
	private boolean firstJoin = false;
	
	private void setupDuelItems(Player p)
	{
		// TODO Kits
		p.getInventory().clear();
		
		// Iron Sword
		ItemStack sword = new ItemStack(Material.DIAMOND_SWORD);
		p.getInventory().setItem(0,sword);
		
		// Armor
		p.getEquipment().setHelmet(new ItemStack(Material.GOLD_HELMET));
		p.getEquipment().setChestplate(new ItemStack(Material.GOLD_CHESTPLATE));
		p.getEquipment().setLeggings(new ItemStack(Material.GOLD_LEGGINGS));
		p.getEquipment().setBoots(new ItemStack(Material.GOLD_BOOTS));
		
	}
	
	public DuelListener(MainClass plugin)
	{
		this.plugin = plugin;
	}
	
	@EventHandler
	public void onJoin(PlayerJoinEvent e)
	{
		
		Player p = e.getPlayer();
		
		if(!firstJoin)
		{
			firstJoin = true;
			Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, new Runnable() {
				
				@Override
				public void run() {
				
					if(Messenger.sendMessage(null, "BungeeCord", "GetServer", null))
					{
						System.out.println("Started asking");
					}
					else
					{
						System.out.println("Asking failed");
					}
					
					
					
				}
			}, 20*1);
			
		}
		
		
		// Setup the stats
		p.setHealth(p.getMaxHealth());
		p.setFoodLevel(9);
		
		Challenge c;
		
		if(ChallangeManager.getAllChallenges().size() == 0)
		{
			c =  ChallangeManager.newChallenge(p,plugin.getMySQL());
		}
		else
		{
			c = ChallangeManager.getChallenge(p);
		}
		
		if(c == null)
		{
			p.sendMessage(ChatColor.RED +  "Keine Herausforderung");
			p.teleport(p.getWorld().getSpawnLocation());
		}
		else
		{

			Map maps = MapManager.getMap(c.arenaName);
			if(maps == null)
			{
				p.sendMessage(ChatColor.RED + "Hier sind keine Maps");
				p.teleport(p.getWorld().getSpawnLocation());
			}
			else
			{
				int role = ChallangeManager.getRole(p, c);
				if(role != Challenge.NO_ID || role != Challenge.NO_ROLE)
				{
					
					Duel d = DuelManager.newDuel(c);
					
					
					
					if(role == Challenge.IS_CHALLANGER)
					{
						p.teleport(maps.getSpawn1());
						d.addPlayer(p, 1);
					}
					else if(role == Challenge.IS_CHALLANGED)
					{
						p.teleport(maps.getSpawn2());
						d.addPlayer(p, 2);
					}
					
				}
				else
				{
					p.sendMessage(ChatColor.RED +  "Keine Rolle");
					p.teleport(p.getWorld().getSpawnLocation());
				}
				
			}
		}
		
		
	}

	@EventHandler
	public void onDeath(PlayerDeathEvent e)
	{
		System.out.println("OnDeath");
		Player p = e.getEntity();
		Duel d = DuelManager.getDuel(p);
		
		if(d!= null)
		{
			int death = d.playerDeath(p);
			if(death == Duel.P1 || death == Duel.P2)
			{
				String[] args = new String[0];
				System.out.println("Here 1");
				EndmatchCommand.endMatch(p, args);
			}
		}
	}
	
	@EventHandler
	public void onMove(PlayerMoveEvent e)
	{
		Player p = e.getPlayer();
		Duel d = DuelManager.getDuel(p);
		
		if(d!= null)
		{
			if(!d.isStarted())
			{
				int role = d.getRole(p);
				
				if(role == Duel.P1)
				{
					p.teleport(d.getMap().getSpawn1());
				}
				else if(role == Duel.P2)
				{
					p.teleport(d.getMap().getSpawn2());
				}
				else
				{
					p.teleport(p.getWorld().getSpawnLocation());
				}
			}
		}
	}
	
	@EventHandler
	public void onLeave(PlayerQuitEvent e)
	{
		e.setQuitMessage("");
		
		Duel d = DuelManager.getDuel(e.getPlayer());
		
		if(d!=null)
		{
			Challenge c = d.getChallenge();
			
			ArrayList<Player> others = DuelManager.deleteDuel(e.getPlayer());
			
			for(int i = 0;i<others.size();i++)
			{
				
				String[] args = new String[1];
				
				args[0] = c.getPreviousServer(i);
				
				Messenger.sendMessage(others.get(i), "BungeeCord", "Connect", args);
			}
			
			
			ChallangeManager.deleteChallenge(c.ID);
			
			
		}
		
		
	}
}
