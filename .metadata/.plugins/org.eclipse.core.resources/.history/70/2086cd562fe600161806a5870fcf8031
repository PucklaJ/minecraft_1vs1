package at.Kingcraft.OnevsOne_lobby.Stats;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import at.Kingcraft.OnevsOne_lobby.Messaging.Messages;

public class Statistics
{
	private int kills;
	private int deaths;
	private int wins;
	private int loses;
	private int plays;
	private int tournamentWins;
	private int elo;
	public static HashMap<UUID,UUID> statsResetter = new HashMap<>();
	
	public Statistics(int k,int d,int w,int l,int p,int tw,int elo)
	{
		kills = (k);
		deaths = (d);
		wins = (w);
		loses = (l);
		plays = p;
		tournamentWins = tw;
		this.elo = elo;
	}
	
	private static double round(double value, int places)
	{
	    if (places < 0) throw new IllegalArgumentException();
	    BigDecimal bd = new BigDecimal(value);
	    bd = bd.setScale(places, RoundingMode.HALF_UP);
	    return bd.doubleValue();
	}

	public int getKills() {
		return kills;
	}

	public int getDeaths() {
		return deaths;
	}

	public int getWins() {
		return wins;
	}

	public int getLoses() {
		return loses;
	}
	
	public int getPlays()
	{
		return plays;
	}
	
	public int getTournamentWins()
	{
		return tournamentWins;
	}
	
	public void setKills(int i)
	{
		kills = i;
	}

	public void setDeaths(int i)
	{
		deaths = i;
	}

	public void setWins(int i)
	{
		wins = i;
	}

	public void setLoses(int i)
	{
		loses = i;
	}
	
	public void setPlays(int i)
	{
		plays = i;
	}
	
	public void setTournamentWins(int i)
	{
		tournamentWins = i;
	}
	
	public double getKD()
	{
		return round((double)kills/(deaths==0 ? 1.0 : (double)deaths),2);
	}
	
	public double getWL()
	{
		return round((double)wins/(loses==0 ? 1.0 : (double)loses),2);
	}
	
	@Override
	public String toString()
	{
		return kills + ";" + deaths + ";" + wins + ";" + loses + ";" + plays + ";" + tournamentWins;
	}
	
	public static Statistics fromString(String str)
	{
		String[] str1 = str.split(";");
		
		return new Statistics(Integer.valueOf(str1[0]), Integer.valueOf(str1[1]), Integer.valueOf(str1[2]), Integer.valueOf(str1[3]),Integer.valueOf(str1[4]),Integer.valueOf(str1[5]));
	}
	
	private double getWinsPerPlay()
	{
		return plays == 0 ? 0 : ((double)wins/(double)plays);
	}
	
	public static void reset(Player p,UUID u)
	{
		if(statsResetter.get(p.getUniqueId()) == null)
		{
			statsResetter.put(p.getUniqueId(),u);
		}
		
		if(p.getUniqueId().equals(u))
			p.sendMessage(Messages.reallyStatsReset);
		else
			p.sendMessage(Messages.reallyStatsResetOther(Bukkit.getOfflinePlayer(u).getName()));
	}
	
	public void send(CommandSender p)
	{
		p.sendMessage(Messages.stats(getKills(), getDeaths(), getKD(), getPlays(), getWins(), getLoses(), round(getWinsPerPlay()*100.0, 1), getTournamentWins()));
	}
}
