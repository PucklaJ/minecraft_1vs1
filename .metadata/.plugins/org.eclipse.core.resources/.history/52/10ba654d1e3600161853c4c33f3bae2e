package at.Kingcraft.OnevsOne_lobby.Lobby;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.FoodLevelChangeEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.inventivetalent.bossbar.BossBarAPI;
import org.inventivetalent.bossbar.BossBarAPI.Color;
import org.inventivetalent.bossbar.BossBarAPI.Style;

import at.Kingcraft.OnevsOne_lobby.utils.MainClass;
import at.Kingcraft.OnevsOne_lobby.Arenas.ArenaManager;
import at.Kingcraft.OnevsOne_lobby.Commands.RefuseCommand;
import at.Kingcraft.OnevsOne_lobby.Duels.ChallangeManager;
import at.Kingcraft.OnevsOne_lobby.Messaging.Messenger;
import at.Kingcraft.OnevsOne_lobby.Special.EnquieryMenu;
import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.chat.TextComponent;

public class LobbyListener implements Listener {
	
	private static MainClass plugin;
	private Location spawn;
	private boolean firstSpawn = false;
	public static HashMap<UUID,String> serverNames = new HashMap<>();
	
	private boolean checkLobby(Player p)
	{
		return true;
	}
	
	public LobbyListener(MainClass mainClass) {
		plugin = mainClass;
		spawn = new Location(Bukkit.getWorld(plugin.getConfig().getString("OnevsOne.Lobby.World.Name")),
				plugin.getConfig().getDouble("OnevsOne.Lobby.World.spawn.x"),
				plugin.getConfig().getDouble("OnevsOne.Lobby.World.spawn.y"),
				plugin.getConfig().getDouble("OnevsOne.Lobby.World.spawn.z"),
				(float)plugin.getConfig().getDouble("OnevsOne.Lobby.World.spawn.yaw"),
				(float)plugin.getConfig().getDouble("OnevsOne.Lobby.World.spawn.pitch"));

	}
	
	public static void setupSpawnItems(Player p,boolean first)
	{
		
		p.getInventory().clear();
		
		// Sword
		// For challenging other players 
		Material challengeItem = Material.getMaterial(plugin.getConfig().getString("OnevsOne.Lobby.Items.Challenge.Material"));
		
		if(challengeItem == null)
		{
			System.out.println("[" + plugin.getName() + "] Fehler bei ChallengeItem! (Vielleicht falsches Material!)" );
			return;
		}
		
		ItemStack item = new ItemStack(challengeItem);
		ItemMeta meta = item.getItemMeta();
		
		meta.setDisplayName(ChatColor.RED + "Gegner Herausfordern");
		
		ArrayList<String> lore = new ArrayList<String>();
		lore.add(ChatColor.YELLOW + "LINKS" + ChatColor.WHITE + "-Klick auf SPIELER:" + ChatColor.YELLOW + "Herausfordern");
		meta.setLore(lore);
		item.setItemMeta(meta);
		
		p.getInventory().setItem(0, item);
		
		//Head
		// For showing challenges
		ChallangeManager.setupSkull(p, p,first);
	}

	private void setupJoinChallenges(Player p)
	{
		ChallangeManager.setNum(p, 0);
	}
	
	private void setupBossBar(Player p)
	{
		BossBarAPI.addBar(p, new TextComponent(ChatColor.YELLOW + "Keine Herausforderung"),
				Color.BLUE,
				Style.NOTCHED_12,
				1.0f, 0,0);
	}
	@EventHandler
	public void onJoin(PlayerJoinEvent e)
	{
		if(!firstSpawn)
		{
			firstSpawn = true;
			Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, new Runnable() {
				
				@Override
				public void run()
				{
					// Add Server to ArenaManager
					boolean getServersWorked = Messenger.sendMessage(null, "BungeeCord", "GetServers", null);
					if(getServersWorked)
					{
						System.out.println("[" + plugin.getName() + "] Successfully asked about Servers");
					}
					else
					{
						System.out.println("[" + plugin.getName() + "] Asking about Servers failed");
						firstSpawn = false;
					}
					
					boolean getServerName = Messenger.sendMessage(null, "BungeeCord", "GetServer", null);
					
					if(getServerName)
					{
						System.out.println("[" + plugin.getName() + "] Successfully asked about Servername");
					}
					else
					{
						System.out.println("[" + plugin.getName() + "] Asking about Servername failed");
						firstSpawn = false;
					}
					
				}
			}, 20*2);
		}
		Player p = e.getPlayer();
		
		// Get Free Maps back
		String map = serverNames.get(p.getUniqueId());
		if(map != null && map.length() > 0)
		{
			ArenaManager.giveBackToFree(map);
			serverNames.remove(p.getUniqueId());
		}
		
		e.setJoinMessage(ChatColor.GREEN + p.getDisplayName() + ChatColor.YELLOW + " joined the game");
		
		setupJoinChallenges(p);
		
		setupSpawnItems(p,true); // Adds Challenge Sword ++
				
		// setup Position
		p.teleport(spawn);
		
		// Setup FoodLevel
		p.setFoodLevel(20);
		
		// Setup XP
		p.setLevel(0);
		p.setExp(0);
		
		setupBossBar(p);
		
		// TODO startServer hinzufügen
		
		
		
		
	}
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void onLeave(PlayerQuitEvent e)
	{
		Player p = e.getPlayer();
		
		// Jede Challenge Refusen
		
		RefuseCommand.refuseEverything(p);
		
		ChallangeManager.deleteNum(p);
		BossBarAPI.removeBar(p);
		e.setQuitMessage(ChatColor.GREEN + p.getDisplayName() + ChatColor.YELLOW +  " left the game");
		
		
		
	}
	
	@EventHandler
	(priority = EventPriority.HIGHEST)
	public void onInventory(InventoryClickEvent e)
	{
		if(!checkLobby((Player)e.getWhoClicked()))
		{
			return;
		}
		if(e.getWhoClicked() instanceof Player)
		{
			
			if(e.getClickedInventory() == null)
			{
				return;
			}
			
			Player p = (Player)e.getWhoClicked();
			
			
			
			if(e.getClickedInventory().getName().equalsIgnoreCase(plugin.getConfig().getString("OnevsOne.Lobby.Items.Enquiries.Text")))
			{
				ItemStack is = e.getClickedInventory().getItem(e.getSlot());
				if(is == null)
				{
					return;
				}
				if(is.getType() == Material.SKULL_ITEM)
				{
					if(EnquieryMenu.getWhichSkull(e.getSlot()) == EnquieryMenu.CHED)
					{
						p.performCommand("1vs1 " + is.getItemMeta().getDisplayName());
					}
					else if(EnquieryMenu.getWhichSkull(e.getSlot()) == EnquieryMenu.CHERS)
					{
						p.performCommand("refuse " + is.getItemMeta().getDisplayName());
					}
				}
				else if(is.getType() == Material.WOOD_BUTTON)
				{
						int slot = EnquieryMenu.getWhichButton(e.getSlot());
						
						if(slot == EnquieryMenu.CHED_NEXT)
						{
							ChallangeManager.getEnquiryMenu(p).goNEXT(EnquieryMenu.CHED);
						}
						else if(slot == EnquieryMenu.CHED_PREV)
						{
							ChallangeManager.getEnquiryMenu(p).goPREV(EnquieryMenu.CHED);
						}
						else if(slot == EnquieryMenu.CHERS_NEXT)
						{
							ChallangeManager.getEnquiryMenu(p).goNEXT(EnquieryMenu.CHERS);
						}
						else if(slot == EnquieryMenu.CHERS_PREV)
						{
							ChallangeManager.getEnquiryMenu(p).goPREV(EnquieryMenu.CHERS);
						}
						
				}
				// Cancel if its in the Enquire Menu
				e.setCancelled(true);
			}
			else if(e.getCurrentItem().getType() != Material.AIR &&
					e.getCurrentItem().getItemMeta() != null &&
					e.getCurrentItem().getItemMeta().getDisplayName() != null &&
					(e.getCurrentItem().getItemMeta().getDisplayName().equalsIgnoreCase(ChatColor.RED + "Gegner Herausfordern") ||
					 e.getCurrentItem().getItemMeta().getDisplayName().equalsIgnoreCase(ChatColor.RED + "Herausforderungen")))
			{
				e.setCancelled(true);
			}
		}
		
	}
	
	@EventHandler
	(priority = EventPriority.HIGHEST)
	public void onSkullInteract(PlayerInteractEvent e)
	{
		if(!checkLobby(e.getPlayer()))
		{
			return;
		}
		
		Action a = e.getAction();
		
		
		if(a == Action.RIGHT_CLICK_BLOCK || a == Action.RIGHT_CLICK_AIR)
		{
			ItemStack item = e.getPlayer().getItemInHand();
			
			
			if(item.getType() == Material.SKULL_ITEM)
			{
				e.setCancelled(true);
				e.getPlayer().openInventory(ChallangeManager.getInventory(e.getPlayer()));
				
				if(item.getAmount() == 0)
				{
					item.setAmount(1);
				}
			}
			
		}
	}

	
	@EventHandler
	public void onBlockDestroy(BlockBreakEvent e)
	{
		if(!checkLobby(e.getPlayer()))
		{
			return;
		}
		e.setCancelled(!e.getPlayer().hasPermission("world.destroy")); // Cancel Break when hasn't permission
	}
	
	@EventHandler
	public void onBlockPlace(BlockPlaceEvent e)
	{
		e.setCancelled(!e.getPlayer().hasPermission("world.place"));
	}
	
	@EventHandler
	(priority = EventPriority.HIGHEST)
	public void onInteractWithPlayer(EntityDamageByEntityEvent e)
	{
		
		Player me = null;
		if(e.getDamager() instanceof Player)
		{
			
			
			me = (Player)e.getDamager();
			
			if(!checkLobby(me))
			{
				return;
			}
			
			ItemStack hand = me.getItemInHand();
			if(hand == null)
			{
				e.setCancelled(true);
				return;
			}
			ItemMeta meta = hand.getItemMeta();
			if(meta == null)
			{
				e.setCancelled(true);
				return;
			}
			String name = meta.getDisplayName();
			if(name.equalsIgnoreCase(ChatColor.RED + "Gegner Herausfordern"))
			{
				if(e.getEntity() instanceof Player)
				{
					
					Player other = (Player)e.getEntity();
					
					me.performCommand("1vs1 " + other.getDisplayName());
					
					
				}
				else
				{
					me.sendMessage(ChatColor.RED + "Kein Spieler");
				}
				
			}
			
			e.setCancelled(true);
			
		}
		
		
	}
	
	@EventHandler
	public void onFoodLose(FoodLevelChangeEvent e)
	{
		if(e.getEntity() instanceof Player)
		{
			e.setCancelled(true);
		}
		
	}
	
	 @EventHandler
	 public void onDrop(PlayerDropItemEvent e)
	 {
		 Player p = e.getPlayer();
		 if(!checkLobby(p))
		{
				return;
		}
		 ItemStack item = e.getItemDrop().getItemStack();
		 if(item != null)
		 {
			 if(item.getType().toString().equals(plugin.getConfig().getString("OnevsOne.Lobby.Items.Challenge.Material")))
			 {
					 p.openInventory(ChallangeManager.getInventory(p));
			 }
			 else if(item.getType() == Material.SKULL_ITEM)
			 {
				 p.openInventory(ChallangeManager.getInventory(p));
			 }
		 }
		 
		 e.setCancelled(true);
	 }
	 
	 @EventHandler
	 public void onPlayerDeath(PlayerDeathEvent e)
	 {
		 if(!checkLobby(e.getEntity()))
		 {
			 return;
		 }
		 
		 e.setKeepInventory(true);
		 
		 Player p = e.getEntity();
		 
		 p.setHealth(p.getMaxHealth());
		 p.teleport(spawn);
		 
	 }

	 @EventHandler
	 public void onPlayerDamage(EntityDamageEvent e)
	 {
		 if(!(e.getCause().equals(DamageCause.ENTITY_ATTACK) && e.getEntity() instanceof Player))
			 e.setCancelled(true);
	 }
}
