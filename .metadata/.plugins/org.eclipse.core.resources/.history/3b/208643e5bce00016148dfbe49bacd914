package at.Kingcraft.OnevsOne_lobby.Duels;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.UUID;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;

import at.Kingcraft.OnevsOne_lobby.MainClass;
import at.Kingcraft.OnevsOne_lobby.Sounds;
import at.Kingcraft.OnevsOne_lobby.Arenas.ArenaManager;
import at.Kingcraft.OnevsOne_lobby.Items.Items;
import at.Kingcraft.OnevsOne_lobby.Kits.Kit;
import at.Kingcraft.OnevsOne_lobby.Kits.KitManager;
import at.Kingcraft.OnevsOne_lobby.Messaging.Messages;
import at.Kingcraft.OnevsOne_lobby.Special.EnquieryMenu;
import at.Kingcraft.OnevsOne_lobby.Special.MapMenu;
import at.Kingcraft.OnevsOne_lobby.Special.MenuManager;
import at.Kingcraft.OnevsOne_lobby.Special.SettingMenu;

public class ChallangeManager {
	private static MainClass plugin;
	private static ArrayList<Challenge> challenges;
	private static HashMap<UUID, EnquieryMenu> challengeInventories;

	public static void setup(MainClass plugin)
	{
		ChallangeManager.plugin = plugin;
		challenges = new ArrayList<Challenge>();
		challengeInventories = new HashMap<UUID,EnquieryMenu>();
		
		try
		{
			PreparedStatement ps = plugin.getMySQL().getConnection().prepareStatement("CREATE TABLE IF NOT EXISTS Duel_JoinSpectators (UUID VARCHAR(100),HomeServer VARCHAR(100))");
			ps.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	private static int getID()
	{
		Random r = new Random();
		int id = -1;

		
		do
		{
			id = r.nextInt(Integer.MAX_VALUE);

		} while (id == Challenge.NO_ID || id == Challenge.IS_CHALLANGED || id == Challenge.IS_CHALLANGER
				|| id == Challenge.NO_ROLE);

		for (int i = 0; i < challenges.size(); i++)
		{
			if (id == challenges.get(i).ID)
			{
				do
				{
					id = r.nextInt(Integer.MAX_VALUE);

				} while (id == Challenge.NO_ID || id == Challenge.IS_CHALLANGED || id == Challenge.IS_CHALLANGER
						|| id == Challenge.NO_ROLE);
				i = -1;
			}
		}

		return id;
	}

	private static Challenge getChallenge(int id) {
		if (id == Challenge.NO_ID)
			return null;

		for (Challenge c : challenges)
		{
			if (c.ID == id)
				return c;
		}
		return null;
	}

	private static int isAlreadyIn(Player challenger1, Player challenged1) {
		for (int i = 0; i < challenges.size(); i++)
		{
			Challenge c = challenges.get(i);
			
			if (c.getChallengersUUID().contains(challenger1.getUniqueId())
				&& c.getChallengedUUID().contains(challenged1.getUniqueId()))
			{
				return c.ID;
			}
		}

		return Challenge.NO_ID;
	}

	public static void tellChallenge(ArrayList<Player> challenger1, ArrayList<Player> challenged1)
	{
		//ChooseKit cKit = KitManager.getChoosenKit(challenger1.get(0));
		Kit kit = KitManager.getChoosenKitKit(challenger1.get(0));
		
		for(int i = 0;i<challenger1.size();i++)
		{
			challenger1.get(i).sendMessage(Messages.sendChallenge(challenged1.get(0).getDisplayName(),kit.getName(true,!(kit.getOwnerName().equals("Server") || kit.getOwnerName().equals("Verschieden")),false)));
			challenger1.get(i).playSound(challenger1.get(i).getLocation(), Sounds.sendChallenge, Sounds.sendChallengeVolume, 0.2f);
		}
		for(int i = 0;i<challenged1.size();i++)
		{
			challenged1.get(i).sendMessage(Messages.gotChallenge(challenger1.get(0).getDisplayName(),kit.getName(true,true,false)));
			challenged1.get(i).playSound(challenged1.get(i).getLocation(), Sounds.gotChallenge, Sounds.gotChallengeVolume, 0.2f);
		}
	}
	
	public static EnquieryMenu getEnquiryMenu(Player p)
	{
		return challengeInventories.get(p.getUniqueId());
	}
	
	public static void setupSkull(Player p, Player other)
	{
		ItemStack item = new ItemStack(Material.SKULL_ITEM, 1, (short) 3);
		
		ArrayList<String> lore = null;
		
		setupSkullHotbar(item, other, p, lore);

		setupSkullInventory(p);

	}
	
	private static void setupSkullHotbar(ItemStack item,Player other,Player p,List<String> lore)
	{
		SkullMeta sMeta = (SkullMeta) item.getItemMeta();
		sMeta.setOwner(other.getDisplayName());
		sMeta.setDisplayName(Items.challengeSkullName);
		sMeta.setLore(Items.challengeSkullLore);
		item.setItemMeta(sMeta);

		p.getInventory().setItem(plugin.getConfig().getInt("Items.Skulls.HotbarPosition"), item);
	}
	
	private static void setupSkullInventory(Player p)
	{
		EnquieryMenu em = getEnquiryMenu(p);
		
		em.setChallenges(getChallenges(p));
		
		if(em.isOpen())
		{
			em.updateInventory();
		}
	}

	public static void setupSkull(Player p, Player other, boolean first) {
		ItemStack item = null;
		if(first)
		{
			item = new ItemStack(Material.SKULL_ITEM, 1, (short) 3);
		}
		else
		{
			item = new ItemStack(Material.SKULL_ITEM, 1, (short) 3);
		}

		ArrayList<String> lore = null;
		
		setupSkullHotbar(item, other, p,lore);


		if (first)
		{
			challengeInventories.put(p.getUniqueId(), new EnquieryMenu(p,plugin));


			setupSkullInventory(p);

		}
		else
		{
			setupSkullInventory(p);
		}

	}
	
	public static Challenge sendChallenge(ArrayList<Player> challenger1, ArrayList<Player> challenged1) {

		int alreadyChallengerChallenged = isAlreadyIn(challenger1, challenged1);
		int alreadyChallengedChallenger = isAlreadyIn(challenged1, challenger1);
		
		if (alreadyChallengerChallenged != Challenge.NO_ID)
		{
			return getChallenge(alreadyChallengerChallenged);
		}
		else if (alreadyChallengedChallenger != Challenge.NO_ID)
		{
			return getChallenge(alreadyChallengedChallenger);
		}

		String[] serverName = new String[challenger1.size() + challenged1.size()];
		
		int u = 0;
		for(int i = 0;i<challenger1.size();i++)
		{
			serverName[u] = plugin.serverName;
			u++;
		}
		
		for(int i = 0;i<challenged1.size();i++)
		{
			serverName[u] = plugin.serverName;
			u++;
		}
		
		challenges.add(new Challenge(challenger1, challenged1, getID(),serverName,-1));
		for(int i = 0;i<challenger1.size();i++)
		{
			setupSkull(challenger1.get(i), challenged1.get(0));
		}
		
		for(int i = 0;i<challenged1.size();i++)
		{
			setupSkull(challenged1.get(i), challenger1.get(0));
		}
		
		return challenges.get(challenges.size() - 1);
	}
	
	private static int isAlreadyIn(ArrayList<Player> challenger1, ArrayList<Player> challenged1) {
		
		// Challenges durchgehen
		for(int i = 0;i<challenges.size();i++)
		{
			Challenge c = challenges.get(i);
			
			boolean challengerNotFound = false;
			boolean challengedNotFound = false;
			
			// Challenger durchgehen
			for(int u  = 0;u<c.getChallengers().size();u++)
			{
				// Parameter Challenger durchgehen
				for(int j = 0;j<challenger1.size();j++)
				{
					// Wenn Parameter ChallengerUUID nicht teil der Challengers dann Challenge überspringen
					if(!c.getChallengersUUID().contains(challenger1.get(j).getUniqueId()))
					{
						challengerNotFound = true;
						break;
					}
				}
				if(challengerNotFound)
				{
					break;
				}
			}
			if(challengerNotFound)
			{
				continue;
			}
			
			// Das Gleiche mit Challenged
			for(int u  = 0;u<c.getChallenged().size();u++)
			{
				for(int j = 0;j<challenged1.size();j++)
				{
					if(!c.getChallengedUUID().contains(challenged1.get(j).getUniqueId()))
					{
						challengedNotFound = true;
						break;
					}
				}
				if(challengedNotFound)
				{
					break;
				}
			}
			
			if(!challengedNotFound && !challengerNotFound)
			{
				return c.ID;
			}
			
		}
		
		
		return Challenge.NO_ID;
	}

	public static Challenge sendChallenge(Player challenger1, Player challenged1) {

		if (isAlreadyIn(challenger1, challenged1) != Challenge.NO_ID)
		{
			return getChallenge(isAlreadyIn(challenger1, challenged1));
		}
		else if (isAlreadyIn(challenged1, challenger1) != Challenge.NO_ID)
		{
			return getChallenge(isAlreadyIn(challenged1, challenger1));
		}
		
		ArrayList<Player> challengers = new ArrayList<Player>();
		ArrayList<Player> challenged = new ArrayList<Player>();
		
		challengers.add(challenger1);
		challenged.add(challenged1);
		
		String[] serverName = new String[challengers.size() + challenged.size()];
		
		int u = 0;
		for(int i = 0;i<challengers.size();i++)
		{
			serverName[u] = plugin.serverName;
			u++;
		}
		
		for(int i = 0;i<challenged.size();i++)
		{
			serverName[u] = plugin.serverName;
			u++;
		}
		
		challenges.add(new Challenge(challengers, challenged, getID(),serverName,-1));
		
		setupSkull(challenger1, challenged1);
		setupSkull(challenged1, challenger1);

		return challenges.get(challenges.size() - 1);
	}
	
	
	private static boolean isNotMessage(Player notMessage,Player p)
	{
		if(notMessage == null)
			return false;
		else if(p.getUniqueId().equals(notMessage.getUniqueId()))
			return true;
		else
			return false;
	}
	
	/// TRUE Challenge existiert
	/// FALSE Challenge existiert nicht
	public static boolean deleteChallenge(Player deleter,Player notMessage,int id, boolean setupskull,boolean message) {
		for (int i = 0; i < challenges.size(); i++)
		{
			if (challenges.get(i).ID == id)
			{
				deleteChallenge(deleter, notMessage, challenges.get(i), setupskull, setupskull, message, true);
				return true;
			}
		}
		return false;
	}

	public static void deleteChallenge(Player deleter,Player notMessage,Challenge c,boolean setupskullERS,boolean setupskullEDS,boolean message,boolean messageSelf)
	{
				ArrayList<Player> challengers = c.getChallengers();
				ArrayList<Player> challenged = c.getChallenged();

				challenges.remove(c);

				
				for(int u = 0;u<challengers.size();u++)
				{
					if(message && deleter != null && !challengers.get(u).getUniqueId().equals(deleter.getUniqueId()) && !isNotMessage(notMessage, challengers.get(u)))
					{
						challengers.get(u).sendMessage(Messages.challengeRefuseSenderOther(deleter.getDisplayName()));
					}
					
					if (setupskullERS)
					{
						setupSkull(challengers.get(u), challengers.get(u));
					}
				}
				
				for(int u = 0;u<challenged.size();u++)
				{
					if(message && deleter != null && !challenged.get(u).getUniqueId().equals(deleter.getUniqueId()) && !isNotMessage(notMessage, challenged.get(u)))
					{
						challenged.get(u).sendMessage(Messages.challengeRefuseSenderOther(deleter.getDisplayName()));
					}
					
					if (setupskullEDS)
					{
						setupSkull(challenged.get(u), challenged.get(u));
					}
				}
				
				if(messageSelf && message && !isNotMessage(notMessage, deleter))
				{
					deleter.sendMessage(Messages.challengeRefuseReciever);
				}
	}
	
	/// Gibt Challengers/Challenged zurück
	/// null Wenn keine Challenge vorhanden
	public static ArrayList<Player> deleteChallenge(Player p,Player notMessage, boolean setupskull,boolean message) {
		
		ArrayList<Player> rv = new ArrayList<Player>();
		
		// Challenges durchgehen
		for (int i = 0; i < challenges.size(); i++)
		{
			
				Challenge c = challenges.get(i);
				int role = getRole(p, c);
				
				if(role != Challenge.NO_ID && role != Challenge.NO_ROLE) 
				{
					if(role == Challenge.IS_CHALLANGER)
					{
						rv = c.getChallenged();
					}
					else if(role == Challenge.IS_CHALLANGED)
					{
						rv = c.getChallengers();
					}
					
					deleteChallenge(p, notMessage, c, setupskull, setupskull, message,true);
					
					return rv;
				}
		}

		return null;
	}

	public static void deleteChallenges(Player p,Player notMessage,boolean message)
	{
		for(int i = 0;i<challenges.size();i++)
		{
			int role = getRole(p,challenges.get(i));
			if(role == Challenge.IS_CHALLANGED)
			{
				ChallangeManager.deleteChallenge(p,notMessage,challenges.get(i),true,false,message,false);
				i--;
			}
			else if(role == Challenge.IS_CHALLANGER)
			{
				ChallangeManager.deleteChallenge(p,notMessage,challenges.get(i), false,true,message,false);
				i--;
			}
		}
		
		setupSkull(p, p);
	}
	
	public static Challenge getChallenge(Player p) {
		for (Challenge c : challenges)
		{
			int role = getRole(p,c);
			if (role != Challenge.NO_ID && role != Challenge.NO_ROLE)
			{
				return c;
			}
		}

		return null;
	}

	public static Challenge getChallenge(Player challenger1, Player challenged1) {
		return getChallenge(isAlreadyIn(challenger1, challenged1));
	}

	public static int getRole(Player p, int id)
	{
		Challenge rv = getChallenge(id);
		if (rv != null)
		{
			for(int i =0;i<rv.getChallengers().size();i++)
			{
				if(rv.getChallengers().get(i).getUniqueId() == p.getUniqueId())
				{
					return Challenge.IS_CHALLANGER;
				}
			}
			
			for(int i =0;i<rv.getChallenged().size();i++)
			{
				if(rv.getChallenged().get(i).getUniqueId() == p.getUniqueId())
				{
					return Challenge.IS_CHALLANGED;
				}
			}
			
			return Challenge.NO_ROLE;
			
		}
		return Challenge.NO_ID;

	}
	
	public static int getRole(Player p, Challenge c)
	{
		if(p == null)
		{
			return Challenge.NO_ROLE;
		}
		if (c != null)
		{
			for(int i =0;i<c.getChallengers().size();i++)
			{
				if(c.getChallengers().get(i).getUniqueId() == p.getUniqueId())
				{
					return Challenge.IS_CHALLANGER;
				}
			}
			
			for(int i =0;i<c.getChallenged().size();i++)
			{
				if(c.getChallenged().get(i).getUniqueId() == p.getUniqueId())
				{
					return Challenge.IS_CHALLANGED;
				}
			}
			
			return Challenge.NO_ROLE;
			
		}
		return Challenge.NO_ID;

	}
	
	public static ArrayList<Challenge> getChallenges(Player p) {
		ArrayList<Challenge> challs = new ArrayList<Challenge>();

		for (int i = 0; i < challenges.size(); i++)
		{
			int role = getRole(p,challenges.get(i));
			if(role != Challenge.NO_ID && role != Challenge.NO_ROLE)
			{
				challs.add(challenges.get(i));
			}
		}

		return challs;

	}
	
	public static void startFFA(Team t)
	{	
		String server = ArenaManager.giveArena();
		
		if(server.equals(""))
		{
			t.getLeader().sendMessage(Messages.noFreeArena);
			return;
		}
		
		String[] serverNames = new String[t.getPlayers().size()];
		
		for(int i = 0;i<serverNames.length;i++)
		{
			serverNames[i] = plugin.serverName;
		}
		
		Challenge c = new Challenge(t.getPlayers(), null,getID(),serverNames,-1);
		
		SettingMenu sm = MenuManager.getSettingMenu(t.getLeader());
		
		DuelManager.sendDuelToSQL(c, server, MapMenu.getRandomArena(sm.getMapMenu().getMyMaps(), null),KitManager.getDif(t.getLeader()), -2, false, 1);
		
		for(int i = 0;i<t.getPlayers().size();i++)
		{
			KitManager.uploadDifKit(t.getPlayers().get(i));
		}
		
		for(int i = 0;i<t.getPlayers().size();i++)
			ArenaManager.teleportToArena(t.getPlayers().get(i), server, true);
		
		SpectateManager.uploadToMySQL(t.getPlayers(), null, server, c.ID);
	}
}
